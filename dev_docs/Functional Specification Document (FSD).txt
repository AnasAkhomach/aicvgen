Functional Specification Document (FSD)
Project: CV Tailoring AI Agent (MVP)
Version: 1.0
Date: May 1, 2025
Authors: [Your Name/Team Name]
1. Introduction
1.1 Purpose
The purpose of this Functional Specification Document is to detail the functional requirements and user interactions of the CV Tailoring AI Agent MVP from a user's perspective. It describes what the system will do, how the user will interact with it via the interface launched by main.py, and the expected system behavior for each feature.
1.2 Scope
This document covers the user-facing functionality of the MVP, including the process of inputting a base CV and job descriptions, initiating the AI-driven tailoring process for key sections (Key Qualifications, Professional Experience, Side Projects, Executive Summary), interacting with the system through a graphical user interface for reviewing and refining generated content at a granular level, persisting tailoring sessions, and generating a final tailored CV document.
1.3 Definitions, Acronyms, and Abbreviations
(Inherit definitions from SRS and SDD, Sections 1.3)
UI: User Interface (accessed via running main.py).
1.4 References
Software Requirements Specification (SRS) for the CV Tailering AI Agent (MVP)
Software Design Document (SDD) for the CV Tailoring AI Agent (MVP)
aicvgen/main.py
aicvgen/ui.py (Contains UI implementation details referenced by main.py)
Other documents referenced in SRS/SDD.
1.5 Overview
The rest of this document describes the user interface structure and details the functional requirements of the system, organized by feature area, describing the user's interaction and the system's response for each.
2. User Interface
The user interface is accessed by running the main.py script, which launches a web-based application using Streamlit. The UI is designed to guide the user through the CV tailoring process and present information clearly, especially the generated content for review.


2.1 Interface Layout
The layout will consist of:
Sidebar (Optional but recommended): For global settings, session management (load/save), and potentially input file uploads.
Main Content Area: This is where the primary interaction takes place.
Input Section: Area for uploading/pasting CV and Job Description text. Includes buttons to initiate processing.
Progress/Status Indicator: Displays the current stage of the tailoring process (e.g., "Parsing CV...", "Generating Key Qualifications...", "Review Key Qualifications...").
Review Area: The main display for generated CV content, presented using a card-based layout.
Card-Based Review Area:
Each major dynamic section (Key Qualifications, Professional Experience, Side Projects, Executive Summary) will likely have its own primary card or container.
Within sections like Professional Experience and Side Projects, individual roles or projects will have their own sub-cards or expandable areas (st.expander).
Individual items (like bullet points, key qualifications, summary paragraphs) will be clearly displayed within their respective cards/sub-cards.
Each displayed item of generated or user-edited content will be presented in an editable text area.
Alongside each editable item, interactive buttons will be displayed:
"Accept": Marks the item as finalized.
"Regenerate": Requests the system to generate a new version of this specific item.
(Implicit Edit): Directly typing in the text area constitutes an edit.
A visual indicator (e.g., text label, color coding) will show the status of each item (e.g., "Generated", "User Edited", "Accepted", "Needs Regeneration", "Static").
Final Output Section: Area to trigger the final document generation and provide a download link.
3. Functional Requirements (Detailed)
3.1 Feature: Input & Session Initialization
Description: Allows the user to provide the necessary source documents (CV and JDs) to begin a tailoring session or load a previous session.
User Interaction:
User runs main.py to launch the application in their web browser.
User locates input fields/upload buttons in the UI (e.g., in a sidebar or initial main area).
User uploads or pastes text for their base CV (Markdown expected).
User uploads or pastes text for the main target Job Description.
User optionally uploads or pastes texts for similar Job Descriptions.
User clicks a button (e.g., "Start Tailoring Session" or "Load Session").
System Response:
If "Start Tailoring Session": The system initiates a new tailoring workflow, generating a unique session ID and initializing the StructuredCV state by calling the Parser Agent.
If "Load Session": The system prompts the user to select a session file or enters the session ID, and attempts to load the corresponding StructuredCV state using the State Manager.
The UI updates to show the loading/parsing progress.
Upon successful initialization/loading, the UI transitions to the review interface, potentially showing the parsed base CV structure or a partially completed tailoring state.
3.2 Feature: Automatic Initial Content Generation
Description: The system automatically uses AI agents to generate tailored content for dynamic CV sections based on the input documents.
User Interaction:
Inputs are provided, and the session is started.
(User watches progress indicator).
System Response:
The Manager Agent orchestrates the sequence: Parser (already ran), Research, Content Writer (for Key Qualifications), Content Writer (for Professional Experience), Content Writer (for Side Projects), Content Writer (for Executive Summary).
The system utilizes the LLM and Vector Database internally.
The progress indicator updates to show the current generation task.
As each section's content is generated, the system updates the StructuredCV state (setting status to GENERATED).
The UI refreshes to display the newly generated content in the review area cards, with the status clearly marked.
3.3 Feature: Interactive Review of Generated Content
Description: The user reviews the AI-generated content displayed in the UI.
User Interaction:
System completes initial content generation.
User scrolls through the UI, examining the content in the card-based layout for each section, subsection (roles/projects), and item (bullet points, key quals).
User reads the generated text.
System Response:
The UI displays the content from the StructuredCV state, rendering sections, subsections, and individual items (bullets, key quals, summary paragraphs) in a structured, readable format.
Each item's status (e.g., "Generated") is visually indicated.
Editable text areas contain the current content of each item.
"Accept" and "Regenerate" buttons are visible next to editable items.
3.4 Feature: Granular Content Editing
Description: The user can directly modify the text of any individual generated content item.
User Interaction:
User reviews a generated item.
User clicks into the editable text area for that item.
User types, deletes, or modifies the text.
User clicks away or presses Enter (implementation detail varies by framework, but the change is captured).
System Response:
The UI captures the user's changes to the text area.
The system updates the corresponding item in the StructuredCV state via the State Manager, changing its content and setting its status to USER_EDITED. This update might trigger a visual change in the UI (e.g., status indicator changes).
The change is recorded in the session state for persistence.
3.5 Feature: Granular Feedback and Regeneration
Description: The user explicitly approves content or requests a new version of a specific item.
User Interaction:
User reviews a generated or edited item.
If satisfied, user clicks the "Accept" button next to the item.
If not satisfied, user clicks the "Regenerate" button next to the item. User may optionally add a comment or edit the text before clicking "Regenerate".
System Response:
On "Accept": The system updates the status of the specific item in the StructuredCV state to ACCEPTED via the State Manager. The UI visually indicates the 'Accepted' status. This item will not be regenerated automatically unless the user explicitly changes its status later.
On "Regenerate": The system updates the status of the specific item in the StructuredCV state to TO_REGENERATE via the State Manager. The UI visually indicates 'Needs Regeneration'. The Manager Agent detects this status and triggers the Content Writer Agent specifically for this item. The Content Writer uses the updated context (including previous generation, user edits, feedback comment if provided) to generate a new version.
The UI updates with the newly generated content for that specific item when ready, setting its status back to GENERATED. The user can then review the new version.
3.6 Feature: Session Persistence
Description: The user's tailoring progress is saved, allowing them to leave and return to a session.
User Interaction:
User performs tailoring actions (generation, edits, feedback).
User closes the application or browser tab.
User later runs main.py again.
User selects the option to load a previous session and chooses the desired session.
System Response:
The system automatically saves the current StructuredCV state to a file at key points (e.g., after each major generation step, after user feedback is processed). Manual save option may also be provided.
When loading, the State Manager reads the StructuredCV state from the saved file.
The UI is populated with the content and status of the StructuredCV state at the point it was last saved.
3.7 Feature: Final CV Output Generation
Description: The user can generate and download the complete tailored CV document once satisfied with the content.
User Interaction:
User reviews and finalizes content using the review and feedback features.
User clicks a "Generate Final CV" or "Download" button.
User may be prompted to select an output format (e.g., Markdown, PDF).
System Response:
The system calls the Formatter Agent, providing the final StructuredCV state and chosen output format.
The Formatter Agent renders the content according to the template and format (including LaTeX compilation if needed).
The system provides the user with a link or prompt to download the generated file.
(Optional) A basic quality check might run before finalizing.
3.8 Feature: Automated Quality Checks (Basic)
Description: The system performs basic checks on the generated content.
User Interaction:
(Implicit) Checks run during or after content generation.
User might see warnings or suggestions in the UI related to quality issues (e.g., "This bullet point seems very short").
System Response:
The Quality Assurance Agent performs checks on generated items (e.g., length, simple keyword matching).
(MVP scope decision needed) The system could update the Item status or metadata with quality flags, which the UI could then display.


==================================================================================


Functional Specification Document (FSD)
Project: CV Tailoring AI Agent (MVP)
Version: 1.1 (Revised)
Date: May 1, 2025
Authors: [Your Name/Team Name]
1. Introduction
1.1 Purpose
The purpose of this Functional Specification Document is to detail the functional requirements and user interactions of the CV Tailoring AI Agent MVP from a user's perspective. It describes what the system will do, how the user will interact with it via the interface launched by main.py, and the expected system behavior for each feature, incorporating updated details on input methods.
1.2 Scope
This document covers the user-facing functionality of the MVP, including the process of inputting a base CV (in Markdown or plain text formats) or starting from scratch, inputting job descriptions, initiating the AI-driven tailoring process for key sections (Key Qualifications, Professional Experience, Side Projects, Executive Summary), interacting with the system through a graphical user interface for reviewing and refining generated content at a granular level, persisting tailoring sessions, and generating a final tailored CV document. Future stages may include parsing additional input formats (e.g., image/PDF via OCR) and adding features like web search to gather external information about companies.
1.3 Definitions, Acronyms, and Abbreviations
(Inherit definitions from SRS and SDD, Sections 1.3)
UI: User Interface (accessed by running main.py).
1.4 References
Software Requirements Specification (SRS) for the CV Tailering AI Agent (MVP) - Version 1.1
Software Design Document (SDD) for the CV Tailoring AI Agent (MVP) - Version 1.2
aicvgen/main.py (Contains Streamlit UI implementation)
Other documents referenced in SRS/SDD.
1.5 Overview
The rest of this document describes the user interface structure and details the functional requirements of the system, organized by feature area, describing the user's interaction and the system's response for each, with updated input handling options.
2. User Interface
The user interface is accessed by running the main.py script, which launches a web-based application using Streamlit. The UI is designed to guide the user through the CV tailoring process and present information clearly, especially the generated content for review.
2.1 Interface Layout
The layout will consist of:
Sidebar (Optional but recommended): For global settings, session management (load/save), and input file uploads/text areas and the "Start from Scratch" option.
Main Content Area: This is where the primary interaction takes place.
Input Section: Area for uploading/pasting CV text (Markdown, plain text) or selecting the "Start from Scratch" option, and uploading/pasting Job Description text. Includes buttons to initiate processing.
Progress/Status Indicator: Displays the current stage of the tailoring process.
Review Area: The main display for generated CV content, presented using a card-based layout, allowing interaction with individual items.
Card-Based Review Area:
(Description of cards, editable text areas, buttons, and status indicators remains the same as previous FSD draft).
3. Functional Requirements (Detailed)
3.1 Feature: Input & Session Initialization
Description: Allows the user to provide the necessary source documents (CV and JDs) or choose to build a CV from scratch, to begin a tailoring session or load a previous session.
User Interaction:
User runs main.py to launch the application in their web browser.
User locates input fields/options in the UI (e.g., in a sidebar or initial main area).
User chooses one of the following input methods for their CV:
Upload or paste text for their base CV (Markdown or plain text).
Select a distinct option to "Start from Scratch".
User uploads or pastes text for the main target Job Description.
User optionally uploads or pastes texts for similar Job Descriptions.
User clicks a button (e.g., "Start Tailoring Session" or "Load Session").
System Response:
If "Start Tailoring Session": The system initiates a new tailoring workflow, generating a unique session ID and initializing the StructuredCV state by calling the Parser Agent (either parsing the provided text or creating an empty structure if "start from scratch" was selected).
If "Load Session": The system prompts the user to select a session file or enters the session ID, and attempts to load the corresponding StructuredCV state using the State Manager.
The UI updates to show the loading/parsing progress.
Upon successful initialization/loading, the UI transitions to the review interface, showing the parsed CV structure (or the empty structure for "start from scratch") or a partially completed tailoring state.
3.2 Feature: Automatic Initial Content Generation
Description: The system automatically uses AI agents to generate tailored content for dynamic CV sections based on the input documents or to populate sections if starting from scratch.
User Interaction:
Inputs are provided (or scratch option selected), and the session is started.
(User watches progress indicator).
System Response:
The Manager Agent orchestrates the sequence: Parser (already ran), Research (if CV content exists), Content Writer (for Key Qualifications), Content Writer (for Professional Experience), Content Writer (for Side Projects), Content Writer (for Executive Summary). If starting from scratch, the Content Writer will generate content based primarily on the JD and standard CV section structures.
The system utilizes the LLM (Google GenAI) and Vector Database (ChromaDB) internally.
The progress indicator updates to show the current generation task.
As each section's content is generated, the system updates the StructuredCV state (setting status to GENERATED).
The UI refreshes to display the newly generated content in the review area cards, with the status clearly marked.
3.3 Feature: Interactive Review of Generated Content
Description: The user reviews the AI-generated content displayed in the UI.
User Interaction: (Remains the same as previous FSD draft - scrolling, reading cards).
System Response: (Remains the same as previous FSD draft - displaying StructuredCV content with status indicators and interactive elements).
3.4 Feature: Granular Content Editing


Description: The user can directly modify the text of any individual generated content item.
User Interaction: (Remains the same as previous FSD draft - typing in text area).
System Response: (Remains the same as previous FSD draft - capturing edits, updating StateManager, setting status to USER_EDITED).
3.5 Feature: Granular Feedback and Regeneration
Description: The user explicitly approves content or requests a new version of a specific item.
User Interaction: (Remains the same as previous FSD draft - clicking Accept/Regenerate buttons).
System Response: (Remains the same as previous FSD draft - updating StateManager status to ACCEPTED or TO_REGENERATE, Manager triggering Content Writer for TO_REGENERATE items).
3.6 Feature: Session Persistence
Description: The user's tailoring progress is saved, allowing them to leave and return to a session.
User Interaction: (Remains the same as previous FSD draft - closing/reopening app, loading session).
System Response: (Remains the same as previous FSD draft - saving/loading StructuredCV state from file).
3.7 Feature: Final CV Output Generation
Description: The user can generate and download the complete tailored CV document once satisfied with the content.
User Interaction: (Remains the same as previous FSD draft - clicking generate/download button, selecting format).
System Response: (Remains the same as previous FSD draft - Formatter Agent rendering/compiling, providing download link).
3.8 Feature: Automated Quality Checks (Basic)
Description: The system performs basic checks on the generated content.
User Interaction: (Remains the same as previous FSD draft - implicit checks, potential UI indicators).
System Response: (Remains the same as previous FSD draft - QA Agent performing checks, updating state/metadata).
3.9 Non-Functional Requirements
(Reference SRS Section 3.2. The specific performance target of 2 minutes is detailed in the SRS).