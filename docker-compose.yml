version: '3.8'

services:
  aicvgen:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: aicvgen-app
    ports:
      - "8501:8501"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_DEBUG_MODE=${ENABLE_DEBUG_MODE:-false}
      - SESSION_TIMEOUT_SECONDS=${SESSION_TIMEOUT_SECONDS:-3600}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-10}
    env_file:
      - .env
    volumes:
      - ./instance:/app/instance
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aicvgen-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: aicvgen-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      aicvgen:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - aicvgen-network
    profiles:
      - production

  # Optional: Redis for session caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: aicvgen-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aicvgen-network
    profiles:
      - caching

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aicvgen-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - aicvgen-network
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aicvgen-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - aicvgen-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aicvgen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16