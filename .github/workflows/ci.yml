name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Playwright browsers
      run: playwright install

    - name: Run linting
      run: |
        flake8 src/ tests/ --exclude=tests/deprecated/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --exclude=tests/deprecated/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --follow-imports=silent --show-error-codes --no-error-summary || echo "Type checking completed with warnings"

    - name: Install package for testing
      run: pip install -e .

    - name: Run tests
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}:$PYTHONPATH
      run: |
        echo "PYTHONPATH: $PYTHONPATH"
        python -c "import sys; print('Python path:', sys.path)"
        pytest tests/unit/ -v --tb=short
        pytest tests/integration/ -v --tb=short

    - name: Generate coverage report
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}:$PYTHONPATH
      run: |
        pytest --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t aicvgen:latest .

    - name: Test Docker image
      run: |
        docker run --rm aicvgen:latest python -c "import src; print('Docker build successful')"
