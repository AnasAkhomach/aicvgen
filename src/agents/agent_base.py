"""Agent base module providing the abstract base class for all agents in the system."""

from abc import ABC, abstractmethod
from typing import Any
import logging

from src.core.state_manager import AgentIO

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


class AgentBase(ABC):
    """Abstract base class for all agents."""

    def __init__(self, name: str, description: str, input_schema: AgentIO, output_schema: AgentIO):
        """Initializes the AgentBase with the given attributes.

        Args:
            name: The name of the agent.
            description: The description of the agent.
            input_schema: The input schema of the agent.
            output_schema: The output schema of the agent.
        """
        self.name = name
        self.description = description
        self.input_schema = input_schema
        self.output_schema = output_schema

    @abstractmethod
    def run(self, input_data: Any) -> Any:
        """Abstract method to be implemented by each agent."""
        raise NotImplementedError

    def log_decision(self, message: str):
        """
        Logs a decision or action taken by the agent.

        Args:
            message: The message to log.
        """
        logging.info("[%s] %s", self.name, message)

    def generate_explanation(self, input_data: Any, output_data: Any) -> str:
        """
        Generates an explanation for the agent's decision-making process.

        Args:
            input_data: The input data provided to the agent.
            output_data: The output data generated by the agent.

        Returns:
            A string explanation of the decision-making process.
        """
        explanation = (
            f"Agent '{self.name}' processed the input data and generated the following output:\n"
            f"Input: {input_data}\n"
            f"Output: {output_data}\n"
            f"Description: {self.description}"
        )
        return explanation

    def get_confidence_score(self, output_data: Any) -> float:
        """
        Returns a confidence score for the agent's output.

        Args:
            output_data: The output data generated by the agent.

        Returns:
            A float representing the confidence score (0.0 to 1.0).
        """
        # Placeholder implementation; override in subclasses for specific logic
        return 1.0
