"""
This module defines the KeyQualificationsWriterAgent, responsible for generating the Key Qualifications section of the CV.
"""

from typing import Dict, Any
from langchain_core.output_parsers import BaseOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.language_models import BaseLanguageModel
from pydantic import BaseModel, Field

from src.agents.agent_base import AgentBase
from src.config.logging_config import get_structured_logger
from src.models.agent_output_models import KeyQualificationsLLMOutput
from src.error_handling.exceptions import AgentExecutionError

logger = get_structured_logger("key_qualifications_writer_agent")


class KeyQualificationsAgentInput(BaseModel):
    """Pydantic model for KeyQualificationsWriterAgent input validation."""

    main_job_description_raw: str = Field(description="Raw job description text")
    my_talents: str = Field(description="Summary of candidate's talents and experience")
    session_id: str = Field(description="Session identifier")


class KeyQualificationsWriterAgent(AgentBase):
    """
    Agent responsible for generating the Key Qualifications section of a CV.
    Pure LCEL implementation with direct LLM instantiation and declarative chain.
    """

    def __init__(
        self,
        llm: BaseLanguageModel,
        prompt: ChatPromptTemplate,
        parser: BaseOutputParser,
        settings: dict,
        session_id: str,
        name: str = "KeyQualificationsWriterAgent",
        description: str = "Generates key qualifications section for CV",
    ):
        super().__init__(name, description, session_id, settings)

        # Pure LCEL chain: prompt | llm | parser
        self.chain = prompt | llm | parser

        logger.info(
            "KeyQualificationsWriterAgent initialized with Gold Standard LCEL pattern",
            agent_name=self.name,
        )

    async def _execute(self, **kwargs: Any) -> Dict[str, Any]:
        """
        Execute the Key Qualifications writer agent using Gold Standard LCEL pattern.

        Args:
            **kwargs: Input data containing main_job_description_raw and my_talents

        Returns:
            Dict containing the generated key qualifications content
        """
        try:
            # Validate the input dictionary against our Pydantic model
            validated_input = KeyQualificationsAgentInput(**kwargs)

            # Invoke the chain with the validated data
            # Convert Pydantic model back to dict for the chain
            chain_input = {
                "main_job_description_raw": validated_input.main_job_description_raw,
                "my_talents": validated_input.my_talents,
            }

            result: KeyQualificationsLLMOutput = await self.chain.ainvoke(chain_input)

            # Validate that we got qualifications
            if not result or not result.qualifications:
                raise AgentExecutionError(
                    self.name, "No qualifications generated by the LLM"
                )

            # Return ONLY the generated data - no state modification
            return {"generated_key_qualifications": result.qualifications}

        except Exception as e:
            logger.error(f"Error in {self.name}: {str(e)}", exc_info=True)
            raise AgentExecutionError(self.name, str(e)) from e
