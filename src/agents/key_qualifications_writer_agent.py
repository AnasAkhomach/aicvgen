"""
This module defines the KeyQualificationsWriterAgent, responsible for generating the Key Qualifications section of the CV.
"""

from typing import Dict, Any
from langchain_core.output_parsers import BaseOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.language_models import BaseLanguageModel
from pydantic import BaseModel, Field

from src.agents.agent_base import AgentBase
from src.config.logging_config import get_structured_logger
from src.models.agent_output_models import KeyQualificationsLLMOutput
from src.models.workflow_models import ContentType
from src.constants.agent_constants import AgentConstants
from src.models.cv_models import Item, ItemStatus, ItemType, StructuredCV
from src.models.data_models import StructuredCV as DataStructuredCV

logger = get_structured_logger("key_qualifications_writer_agent")


class KeyQualificationsAgentInput(BaseModel):
    """Pydantic model for KeyQualificationsWriterAgent input validation."""
    
    main_job_description_raw: str = Field(
        description="Raw job description text"
    )
    my_talents: str = Field(
        description="Summary of candidate's talents and experience"
    )
    structured_cv: DataStructuredCV = Field(
        description="The structured CV data to update"
    )


class KeyQualificationsWriterAgent(AgentBase):
    """
    Agent responsible for generating the Key Qualifications section of a CV.
    Pure LCEL implementation with direct LLM instantiation and declarative chain.
    """

    def __init__(
        self,
        llm: BaseLanguageModel,
        prompt: ChatPromptTemplate,
        parser: BaseOutputParser,
        settings: dict,
        session_id: str,
        name: str = "KeyQualificationsWriterAgent",
        description: str = "Generates key qualifications section for CV",
    ):
        super().__init__(name, description, session_id, settings)
        self.content_type = ContentType.QUALIFICATION
        
        # Pure LCEL chain: prompt | llm | parser
        self.chain = prompt | llm | parser
        
        logger.info(
            "KeyQualificationsWriterAgent initialized with Gold Standard LCEL pattern",
            agent_name=self.name,
            content_type=self.content_type.value,
        )



    async def _execute(self, **kwargs: Any) -> Dict[str, Any]:
        """
        Execute the Key Qualifications writer agent using Gold Standard LCEL pattern.
        
        Args:
            **kwargs: Input data containing main_job_description_raw, my_talents, and structured_cv
            
        Returns:
            Dict containing the modified structured_cv and current_item_id
        """
        try:
            # Validate the input dictionary against our Pydantic model
            validated_input = KeyQualificationsAgentInput(**kwargs)
            
            self.update_progress(AgentConstants.PROGRESS_MAIN_PROCESSING, "Generating Key Qualifications content using Gold Standard LCEL.")
            
            # Invoke the chain with the validated data
            # Convert Pydantic model back to dict for the chain
            chain_input = {
                "main_job_description_raw": validated_input.main_job_description_raw,
                "my_talents": validated_input.my_talents
            }
            
            result: KeyQualificationsLLMOutput = await self.chain.ainvoke(chain_input)
            
            # Check if result has qualifications
            if not result or not result.qualifications:
                return {"error_messages": ["No qualifications generated by the LLM"]}

            # Find and update the Key Qualifications section
            key_qualifications_section = None
            # Type annotation to help Pylint understand the type
            structured_cv = validated_input.structured_cv  # type: DataStructuredCV
            for section in structured_cv.sections:  # pylint: disable=no-member
                if section.name.lower().replace(" ", "_") == "key_qualifications":
                    key_qualifications_section = section
                    break

            if not key_qualifications_section:
                return {"error_messages": ["Key Qualifications section not found in structured_cv. It should be pre-initialized."]}

            # Update the Key Qualifications section
            current_item_id = None
            for item in key_qualifications_section.items:
                if item.item_type == ItemType.KEY_QUALIFICATION:
                    # Update the content with generated qualifications
                    item.content = "\n".join(result.qualifications)
                    item.status = ItemStatus.COMPLETED
                    current_item_id = str(item.id)
                    break

            if current_item_id is None:
                # If no key qualification item found, create one
                new_item = Item(
                    content="\n".join(result.qualifications),
                    item_type=ItemType.KEY_QUALIFICATION,
                    status=ItemStatus.COMPLETED
                )
                key_qualifications_section.items.append(new_item)
                current_item_id = str(new_item.id)

            self.update_progress(
                AgentConstants.PROGRESS_COMPLETE, "Key Qualifications generation completed successfully using Gold Standard LCEL."
            )
            
            # Return the entire modified structured_cv object
            return {
                "structured_cv": structured_cv,
                "current_item_id": current_item_id
            }
        except Exception as e:
            logger.error(f"Unexpected error in {self.name}: {str(e)}", exc_info=True)
            return {"error_messages": [f"Unexpected error in {self.name}: {str(e)}"]}
