"""Professional Experience Updater Agent.

This agent is responsible for taking the generated professional experience content
and updating the structured CV with it. It follows the LangGraph pattern
of single responsibility per agent.
"""

from typing import Any, Dict
from pydantic import ValidationError

from src.agents.agent_base import AgentBase
from src.constants.agent_constants import AgentConstants
from src.error_handling.exceptions import AgentExecutionError
from src.models.cv_models import StructuredCV, Item, ItemStatus, ItemType
from src.config.logging_config import get_logger

logger = get_logger(__name__)


class ProfessionalExperienceUpdaterAgent(AgentBase):
    """Agent responsible for updating the structured CV with generated professional experience.

    This agent consumes the professional experience content generated by ProfessionalExperienceWriterAgent
    and properly integrates it into the structured CV following the data model patterns.
    """

    def __init__(
        self, session_id: str, name: str = "ProfessionalExperienceUpdaterAgent"
    ):
        """Initialize the ProfessionalExperienceUpdaterAgent.

        Args:
            name: The name of the agent
            session_id: The session identifier
        """
        super().__init__(
            name=name,
            description="Agent responsible for updating the structured CV with generated professional experience",
            session_id=session_id,
        )
        logger.info(f"Initialized {self.name}")

    def _validate_inputs(self, kwargs: dict[str, Any]) -> None:
        """Validate required inputs for the agent.

        Args:
            kwargs: Input arguments containing structured_cv and generated_professional_experience.

        Raises:
            AgentExecutionError: If required inputs are missing or invalid.
        """
        required_fields = ["structured_cv", "generated_professional_experience"]
        for field in required_fields:
            if field not in kwargs or kwargs[field] is None:
                raise AgentExecutionError(self.name, f"Missing required input: {field}")

        # Handle structured_cv input - it may come as a dict from extract_agent_inputs
        structured_cv_value = kwargs["structured_cv"]

        # If it's a dict, convert it to StructuredCV
        if isinstance(structured_cv_value, dict):
            try:
                kwargs["structured_cv"] = StructuredCV(**structured_cv_value)
            except Exception as e:
                raise AgentExecutionError(
                    self.name,
                    f"Failed to convert structured_cv dict to StructuredCV: {e}",
                )
        elif not isinstance(kwargs["structured_cv"], StructuredCV):
            raise AgentExecutionError(
                self.name,
                f"structured_cv must be a StructuredCV instance, got {type(structured_cv_value)}",
            )

        # Validate generated_professional_experience type
        generated_exp = kwargs["generated_professional_experience"]
        if not isinstance(generated_exp, (dict, str)):
            raise AgentExecutionError(
                self.name, "generated_professional_experience must be a dict or string"
            )

        if not generated_exp:
            raise AgentExecutionError(
                self.name, "generated_professional_experience cannot be empty"
            )

    async def _execute(self, **kwargs: Any) -> dict[str, Any]:
        """Execute the professional experience update logic.

        Takes the generated professional experience and updates the structured CV.

        Args:
            **kwargs: Must contain 'structured_cv' and 'generated_professional_experience'.

        Returns:
            dict containing the updated structured_cv.
        """
        try:
            # Validate inputs
            self._validate_inputs(kwargs)

            structured_cv: StructuredCV = kwargs["structured_cv"]
            generated_experience = kwargs["generated_professional_experience"]

            self.update_progress(
                AgentConstants.PROGRESS_MAIN_PROCESSING,
                "Updating CV with generated Professional Experience.",
            )

            # Find the Professional Experience section
            exp_section = None
            for section in structured_cv.sections:
                if section.name == "Professional Experience":
                    exp_section = section
                    break

            if not exp_section:
                return {
                    "error_messages": [
                        "Professional Experience section not found in structured_cv. It should be pre-initialized."
                    ]
                }

            # Handle different types of generated experience content
            if isinstance(generated_experience, dict):
                # If it's a dict, extract the content
                content = generated_experience.get("content", str(generated_experience))
            else:
                # If it's a string, use it directly
                content = str(generated_experience)

            # Update the current item or create a new one
            current_item_id = kwargs.get("current_item_id")
            if current_item_id:
                # Find and update the specific item
                for item in exp_section.items:
                    if hasattr(item, "id") and item.id == current_item_id:
                        item.content = content
                        item.status = ItemStatus.GENERATED
                        break
                else:
                    # Item not found, create a new one
                    new_item = Item(
                        content=content,
                        status=ItemStatus.GENERATED,
                        item_type=ItemType.BULLET_POINT,
                    )
                    exp_section.items.append(new_item)
            else:
                # No specific item ID, add as new item
                new_item = Item(
                    content=content,
                    status=ItemStatus.GENERATED,
                    item_type=ItemType.BULLET_POINT,
                )
                exp_section.items.append(new_item)

            logger.info(
                f"Updated Professional Experience section with generated content"
            )

            self.update_progress(
                AgentConstants.PROGRESS_COMPLETE,
                "Professional Experience update completed successfully.",
            )

            return {
                "structured_cv": structured_cv,
                "current_item_id": current_item_id or "professional_experience_section",
            }

        except AgentExecutionError as e:
            logger.error(f"Agent execution error in {self.name}: {str(e)}")
            return {"error_messages": [str(e)]}
        except (AttributeError, TypeError, ValueError, KeyError) as e:
            logger.error(f"Error updating Professional Experience: {str(e)}")
            return {
                "error_messages": [f"Error updating Professional Experience: {str(e)}"]
            }
        except Exception as e:
            logger.error(f"Unexpected error in {self.name}: {str(e)}", exc_info=True)
            return {
                "error_messages": [
                    f"Unexpected error during Professional Experience update: {str(e)}"
                ]
            }
