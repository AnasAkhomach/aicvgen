from pydantic import BaseModel, Field
from typing import List, Dict, Optional, Any


class ContentWriterJobData(BaseModel):
    """Job data for the content writer agent."""

    title: Optional[str] = None
    raw_text: Optional[str] = None
    description: Optional[str] = None
    company: Optional[str] = None
    skills: Optional[List[str]] = Field(default_factory=list)
    responsibilities: Optional[List[str]] = Field(default_factory=list)
    industry_terms: Optional[List[str]] = Field(default_factory=list)
    company_values: Optional[List[str]] = Field(default_factory=list)


class ContentWriterContentItem(BaseModel):
    """A single content item generated by the content writer agent."""

    id: str
    content: Optional[str] = None
    raw_llm_output: Optional[str] = None
    # Add more fields as needed


class ContentWriterGenerationContext(BaseModel):
    """Context for content generation, such as user talents."""

    my_talents: Optional[List[str]] = Field(default_factory=list)
    # Add more fields as needed


# DEPRECATED: Use EnhancedContentWriterOutput from agent_output_models.py instead.
# class ContentWriterResult(BaseModel):
#     structured_cv: Any
#     error_messages: Optional[List[str]] = Field(default_factory=list)
